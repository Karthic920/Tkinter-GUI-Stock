import tkinter as tk
from tkinter import messagebox
import yfinance as yf
import csv
from datetime import datetime
import threading
import os

# ---------- Helper Functions ----------

def fetch_stock_history(symbol, days):
    stock = yf.Ticker(symbol)
    hist = stock.history(period=f"{days}d")
    return hist

def calculate_avg(open_price, close_price):
    return round((open_price + close_price) / 2, 2)

def save_to_csv():
    symbol = stock_entry.get().upper()
    days = days_slider.get()
    try:
        hist = fetch_stock_history(symbol, days)
        if hist.empty:
            messagebox.showerror("Error", "Not enough data to save.")
            return

        filename = f"stock_history_{datetime.now().strftime('%Y-%m-%d')}.csv"
        write_header = not os.path.exists(filename) or os.path.getsize(filename) == 0

        with open(filename, mode='a', newline='') as file:
            writer = csv.writer(file)

            if write_header:
                writer.writerow(["Symbol", "Date", "Open", "Close", "Average", "Volume"])

            for date, row in hist.iterrows():
                open_p = round(row['Open'], 2)
                close_p = round(row['Close'], 2)
                avg = calculate_avg(open_p, close_p)
                volume = int(row['Volume'])
                writer.writerow([symbol, date.date(), open_p, close_p, avg, volume])

        messagebox.showinfo("Success", f"Data saved to {filename}")

    except Exception as e:
        messagebox.showerror("Error", f"Failed to save CSV.\n{e}")

def reset_csv():
    filename = f"stock_history_{datetime.now().strftime('%Y-%m-%d')}.csv"
    try:
        with open(filename, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Symbol", "Date", "Open", "Close", "Average", "Volume"])
        messagebox.showinfo("Success", f"{filename} reset.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to reset CSV.\n{e}")

def get_stock_history(mode):
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        hist = fetch_stock_history(symbol, days)
        if hist.empty:
            result_label.config(text="No data available.")
            return

        # Clear previous output
        for widget in scrollable_frame.winfo_children():
            widget.destroy()

        previous_value = None

        for date, row in hist.iterrows():
            open_p = round(row['Open'], 2)
            close_p = round(row['Close'], 2)
            volume = int(row['Volume'])

            if mode == "full":
                text = f"{date.date()}: Open=${open_p:.2f}, Close=${close_p:.2f}, Vol={volume}"
                current_value = open_p
            else:
                avg = calculate_avg(open_p, close_p)
                text = f"{date.date()}: Avg=${avg:.2f}, Vol={volume}"
                current_value = avg

            # Color based on change
            if previous_value is None:
                color = "black"
            elif current_value > previous_value:
                color = "green"
            elif current_value < previous_value:
                color = "red"
            else:
                color = "black"

            previous_value = current_value

            label = tk.Label(scrollable_frame, text=text, fg=color,
                             font=("Courier New", 10), bg="#f0f8ff", anchor="w", justify="left")
            label.pack(fill="x", padx=5, pady=2)

    except Exception as e:
        messagebox.showerror("Error", f"Error fetching data.\n{e}")

def fetch_top_movers():
    symbols = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NFLX"]
    movers = []

    try:
        for symbol in symbols:
            stock = yf.Ticker(symbol)
            hist = stock.history(period="2d")
            if len(hist) < 2:
                continue

            prev_close = hist['Close'].iloc[0]
            open_price = hist['Open'].iloc[1]
            change = ((open_price - prev_close) / prev_close) * 100
            movers.append((symbol, change))

        movers.sort(key=lambda x: abs(x[1]), reverse=True)

        text = "🌟 Top 5 Movers 🌟\n"
        for symbol, change in movers[:5]:
            text += f"{symbol}: {change:+.2f}%\n"

        top_movers_label.config(text=text)

    except Exception as e:
        top_movers_label.config(text="⚠️ Top movers failed (rate limit).")

def start_top_movers_thread():
    thread = threading.Thread(target=fetch_top_movers)
    thread.daemon = True
    thread.start()

# ---------- GUI Setup ----------

root = tk.Tk()
root.title("📈 Stock Tracker")
root.geometry("680x550")
root.configure(bg="#e6f2ff")

# Top Movers Label
top_movers_label = tk.Label(root, text="", font=("Comic Sans MS", 12, "bold"),
                            bg="#ccf5ff", fg="#003366", anchor="nw", justify="left")
top_movers_label.place(x=10, y=10)

# Stock Symbol Entry
tk.Label(root, text="Stock Symbol:", font=("Helvetica", 14, "bold"),
         bg="#e6f2ff", fg="#003366").pack(pady=(60, 5))
stock_entry = tk.Entry(root, font=("Helvetica", 12), bg="#ffffff")
stock_entry.pack(pady=5)

# Days Slider
tk.Label(root, text="Days of History:", font=("Helvetica", 12),
         bg="#e6f2ff", fg="#003366").pack(pady=5)
days_slider = tk.Scale(root, from_=2, to=365, orient=tk.HORIZONTAL,
                       font=("Helvetica", 10), bg="#cce0ff", troughcolor="#b3d1ff")
days_slider.set(5)
days_slider.pack(pady=5)

# Buttons Frame
button_frame = tk.Frame(root, bg="#e6f2ff")
button_frame.pack(pady=10)

tk.Button(button_frame, text="Open + Close", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("full")).pack(side="left", padx=5)

tk.Button(button_frame, text="Daily Avg", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("avg")).pack(side="left", padx=5)

tk.Button(button_frame, text="Save to CSV", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=save_to_csv).pack(side="left", padx=5)

tk.Button(button_frame, text="Reset CSV", font=("Comic Sans MS", 10, "bold"),
          bg="#ff9999", fg="#003366", activebackground="#ff6666",
          command=reset_csv).pack(side="left", padx=5)

# Scrollable Results Area
scroll_container = tk.Frame(root, bg="#e6f2ff")
scroll_container.pack(fill="both", expand=True, padx=10, pady=10)

canvas = tk.Canvas(scroll_container, bg="#f0f8ff", height=250)
scrollbar = tk.Scrollbar(scroll_container, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas, bg="#f0f8ff", padx=10, pady=10)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

# Error/Feedback Label
result_label = tk.Label(root, text="", font=("Helvetica", 12), bg="#e6f2ff", fg="red")
result_label.pack(fill="x", padx=10, pady=3)

# Initialize top movers
start_top_movers_thread()
root.mainloop()
