import tkinter as tk
from tkinter import messagebox
import yfinance as yf

# ------------------- Constants -------------------
TOP_STOCKS = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NFLX", "META"]

# ------------------- Main Functions -------------------
def get_stock_history(mode):
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        stock = yf.Ticker(symbol)
        hist = stock.history(period="max")  # Get all data
        hist = hist.tail(days)  # Trim to the exact number of rows

        if hist.empty or len(hist) < 2:
            result_label.config(text="Not enough data.")
            return

        # Clear old results
        for widget in scrollable_frame.winfo_children():
            widget.destroy()

        previous_value = None

        for date, row in hist.iterrows():
            open_price = round(row['Open'], 2)
            close_price = round(row['Close'], 2)
            volume = int(row['Volume'])

            if mode == "full":
                text = f"{date.date()}: Open=${open_price:.2f}, Close=${close_price:.2f}, Vol={volume}"
                compare_value = open_price
            else:  # average
                avg = round((open_price + close_price) / 2, 2)
                text = f"{date.date()}: Avg=${avg:.2f}, Vol={volume}"
                compare_value = avg

            # Color change
            if previous_value is None:
                color = "black"
            elif compare_value > previous_value:
                color = "green"
            elif compare_value < previous_value:
                color = "red"
            else:
                color = "black"

            previous_value = compare_value

            label = tk.Label(scrollable_frame, text=text, fg=color, anchor="w",
                             font=("Courier New", 10), bg="#f0f8ff", justify="left")
            label.pack(fill="x", padx=5, pady=3)

    except Exception as e:
        messagebox.showerror("Error", f"Failed to fetch data.\n{e}")

def top_movers():
    movers = []
    for symbol in TOP_STOCKS:
        try:
            stock = yf.Ticker(symbol)
            hist = stock.history(period="2d")
            if len(hist) < 2:
                continue
            open_price = hist['Open'][0]
            close_price = hist['Close'][-1]
            change = ((close_price - open_price) / open_price) * 100
            movers.append((symbol, change))
        except Exception:
            continue

    movers.sort(key=lambda x: abs(x[1]), reverse=True)
    text = "ðŸ“ˆ Top 5 Movers:\n"
    for symbol, change in movers[:5]:
        text += f"{symbol}: {change:+.2f}%\n"
    top_label.config(text=text)

def auto_refresh():
    top_movers()
    root.after(60000, auto_refresh)

# ------------------- GUI Setup -------------------
root = tk.Tk()
root.title("ðŸ“Š Stock Viewer")
root.geometry("670x550")
root.configure(bg="#e6f2ff")

# Top 5 Movers Label (always top-left)
top_label = tk.Label(root, text="", font=("Helvetica", 11, "bold"),
                     bg="#e6f2ff", fg="#003366", justify="left", anchor="w")
top_label.place(x=10, y=10)

# Stock Symbol Entry
tk.Label(root, text="Enter Stock Symbol:", font=("Helvetica", 14, "bold"),
         bg="#e6f2ff", fg="#003366").pack(pady=(60, 5))
stock_entry = tk.Entry(root, font=("Helvetica", 12), bg="#ffffff")
stock_entry.pack(pady=5)

# Days Slider
tk.Label(root, text="Select Number of Days:", font=("Helvetica", 12),
         bg="#e6f2ff", fg="#003366").pack(pady=5)
days_slider = tk.Scale(root, from_=2, to=252, orient=tk.HORIZONTAL,
                       font=("Helvetica", 10), bg="#cce0ff", troughcolor="#b3d1ff",
                       label="Trading Days")

days_slider.set(30)
days_slider.pack(pady=5)

# Mode Buttons
button_frame = tk.Frame(root, bg="#e6f2ff")
button_frame.pack(pady=5)

tk.Button(button_frame, text="Open + Close", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("full")).pack(side="left", padx=5)

tk.Button(button_frame, text="Daily Avg", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("avg")).pack(side="left", padx=5)

# Scrollable Frame
scroll_frame_container = tk.Frame(root, bg="#e6f2ff")
scroll_frame_container.pack(fill="both", expand=True, padx=10, pady=10)

canvas = tk.Canvas(scroll_frame_container, bg="#f0f8ff", bd=1, relief="solid", height=260)
scrollbar = tk.Scrollbar(scroll_frame_container, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas, bg="#f0f8ff", padx=10, pady=10)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

# Result Label
result_label = tk.Label(root, text="", font=("Helvetica", 12), bg="#e6f2ff", fg="red")
result_label.pack(fill="x", padx=5, pady=3)

# Start App
top_movers()
auto_refresh()
root.mainloop()
