import tkinter as tk
from tkinter import messagebox, filedialog
import yfinance as yf
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg  # Correct import
import os
import csv

# ------------------- Constants -------------------
TOP_STOCKS = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NFLX", "META"]
CACHE_DIR = 'cache'

# Create the cache directory if it doesn't exist
if not os.path.exists(CACHE_DIR):
    os.makedirs(CACHE_DIR)


# ------------------- Main Functions -------------------

def get_stock_history(mode):
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        # Check if the data is already cached
        cache_file = os.path.join(CACHE_DIR, f"{symbol}_{days}.txt")
        if os.path.exists(cache_file):
            with open(cache_file, 'r') as file:
                hist = [line.strip() for line in file.readlines()]
        else:
            stock = yf.Ticker(symbol)
            hist_data = stock.history(period="max")  # Get all data
            hist_data = hist_data.tail(days)  # Limit to the exact number of rows

            # Save to cache as a text file
            with open(cache_file, 'w') as file:
                for index, row in hist_data.iterrows():
                    file.write(f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}\n")
            hist = [f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}" for index, row in
                    hist_data.iterrows()]

        if not hist or len(hist) < 2:
            result_label.config(text="Not enough data.")
            return

        # Clear old results
        for widget in scrollable_frame.winfo_children():
            widget.destroy()

        previous_value = None

        for line in hist:
            date, open_price, close_price, volume = line.split()
            open_price, close_price = round(float(open_price), 2), round(float(close_price), 2)

            # Ensure volume is parsed as an integer
            try:
                volume = int(float(volume))
            except ValueError:
                volume = 0  # Default to 0 if there's an issue with parsing

            if mode == "full":
                text = f"{date}: Open=${open_price:.2f}, Close=${close_price:.2f}, Vol={volume}"
                compare_value = open_price
            else:  # average
                avg = round((open_price + close_price) / 2, 2)
                text = f"{date}: Avg=${avg:.2f}, Vol={volume}"
                compare_value = avg

            # Color change
            if previous_value is None:
                color = "black"
            elif compare_value > previous_value:
                color = "green"
            elif compare_value < previous_value:
                color = "red"
            else:
                color = "black"

            previous_value = compare_value

            label = tk.Label(scrollable_frame, text=text, fg=color, anchor="w",
                             font=("Courier New", 10), bg="#f0f8ff", justify="left")
            label.pack(fill="x", padx=5, pady=3)

    except Exception as e:
        messagebox.showerror("Error", f"Failed to fetch data.\n{e}")


def top_movers():
    movers = []
    for symbol in TOP_STOCKS:
        try:
            stock = yf.Ticker(symbol)
            hist = stock.history(period="2d")
            if len(hist) < 2:
                continue
            open_price = hist['Open'][0]
            close_price = hist['Close'][-1]
            change = ((close_price - open_price) / open_price) * 100
            movers.append((symbol, change))
        except Exception:
            continue

    movers.sort(key=lambda x: abs(x[1]), reverse=True)
    text = "ðŸ“ˆ Top 5 Movers:\n"
    for symbol, change in movers[:5]:
        text += f"{symbol}: {change:+.2f}%\n"
    top_label.config(text=text)


def auto_refresh():
    top_movers()
    root.after(60000, auto_refresh)


# New function to create a graph
def show_stock_graph():
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        # Check if the data is already cached
        cache_file = os.path.join(CACHE_DIR, f"{symbol}_{days}.txt")
        if os.path.exists(cache_file):
            with open(cache_file, 'r') as file:
                hist = [line.strip() for line in file.readlines()]
        else:
            stock = yf.Ticker(symbol)
            hist_data = stock.history(period="max")
            hist_data = hist_data.tail(days)  # Limit to selected number of days

            # Save to cache as a text file
            with open(cache_file, 'w') as file:
                for index, row in hist_data.iterrows():
                    file.write(f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}\n")
            hist = [f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}" for index, row in hist_data.iterrows()]

        if not hist or len(hist) < 2:
            messagebox.showerror("Error", "Not enough data for graph.")
            return

        # Prepare data for plotting
        dates = []
        close_prices = []

        for line in hist:
            date, open_price, close_price, volume = line.split()
            close_prices.append(float(close_price))
            dates.append(date)

        # Create a new window for the graph
        graph_window = tk.Toplevel(root)
        graph_window.title(f"{symbol} Stock Price")
        graph_window.geometry("800x600")

        # Plot the stock data using matplotlib
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(dates, close_prices, label="Close Price", color='blue', linestyle='-', marker='o')
        ax.set_title(f"{symbol} Stock Price", fontsize=14)
        ax.set_xlabel("Date")
        ax.set_ylabel("Price (USD)")
        ax.grid(True)
        ax.legend()

        # Rotate x-ticks and reduce frequency of labels to avoid overlap
        step = max(1, len(dates) // 10)  # Display at most 10 ticks
        ax.set_xticks(dates[::step])  # Show every `step`-th date
        plt.xticks(rotation=45)

        plt.tight_layout()
        canvas = FigureCanvasTkAgg(fig, master=graph_window)  # Correct canvas initialization
        canvas.get_tk_widget().pack(fill="both", expand=True)
        canvas.draw()

    except Exception as e:
        messagebox.showerror("Error", f"Failed to fetch data for graph.\n{e}")


# Function to download data as CSV
def download_csv():
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        # Check if the data is already cached
        cache_file = os.path.join(CACHE_DIR, f"{symbol}_{days}.txt")
        if os.path.exists(cache_file):
            with open(cache_file, 'r') as file:
                hist = [line.strip() for line in file.readlines()]
        else:
            stock = yf.Ticker(symbol)
            hist_data = stock.history(period="max")
            hist_data = hist_data.tail(days)  # Limit to selected number of days

            # Save to cache as a text file
            with open(cache_file, 'w') as file:
                for index, row in hist_data.iterrows():
                    file.write(f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}\n")
            hist = [f"{index.date()} {row['Open']} {row['Close']} {row['Volume']}" for index, row in
                    hist_data.iterrows()]

        if not hist:
            messagebox.showerror("Error", "No data to download.")
            return

        # Prompt to select a location to save the CSV file
        file_path = filedialog.asksaveasfilename(defaultextension=".csv",
                                                 filetypes=[("CSV files", "*.csv")])
        if file_path:
            with open(file_path, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Date', 'Open', 'Close', 'Volume'])  # Header
                for line in hist:
                    date, open_price, close_price, volume = line.split()
                    writer.writerow([date, open_price, close_price, volume])

            messagebox.showinfo("Success", f"Data successfully downloaded to {file_path}")

    except Exception as e:
        messagebox.showerror("Error", f"Failed to download data.\n{e}")


# Function to reset data (clear cache and labels)
def reset_data():
    symbol = stock_entry.get().upper()
    days = days_slider.get()

    try:
        cache_file = os.path.join(CACHE_DIR, f"{symbol}_{days}.txt")
        if os.path.exists(cache_file):
            os.remove(cache_file)
            messagebox.showinfo("Success", "Data reset successfully!")
        else:
            messagebox.showwarning("Warning", "No cached data to reset.")

        # Clear result labels
        result_label.config(text="")
        for widget in scrollable_frame.winfo_children():
            widget.destroy()

    except Exception as e:
        messagebox.showerror("Error", f"Failed to reset data.\n{e}")


# ------------------- GUI Setup -------------------

root = tk.Tk()
root.title("ðŸ“Š Stock Viewer")
root.geometry("670x550")
root.configure(bg="#e6f2ff")

# Top 5 Movers Label (always top-left)
top_label = tk.Label(root, text="", font=("Helvetica", 11, "bold"),
                     bg="#e6f2ff", fg="#003366", justify="left", anchor="w")
top_label.place(x=10, y=10)

# Stock Symbol Entry
tk.Label(root, text="Enter Stock Symbol:", font=("Helvetica", 14, "bold"),
         bg="#e6f2ff", fg="#003366").pack(pady=(60, 5))
stock_entry = tk.Entry(root, font=("Helvetica", 12), bg="#ffffff")
stock_entry.pack(pady=5)

# Days Slider
tk.Label(root, text="Select Number of Days:", font=("Helvetica", 12),
         bg="#e6f2ff", fg="#003366").pack(pady=5)
days_slider = tk.Scale(root, from_=2, to=252, orient=tk.HORIZONTAL,
                       font=("Helvetica", 10), bg="#cce0ff", troughcolor="#b3d1ff",
                       label="Trading Days")

days_slider.set(30)
days_slider.pack(pady=5)

# Mode Buttons
button_frame = tk.Frame(root, bg="#e6f2ff")
button_frame.pack(pady=5)

tk.Button(button_frame, text="Open + Close", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("full")).pack(side="left", padx=5)

tk.Button(button_frame, text="Daily Avg", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=lambda: get_stock_history("avg")).pack(side="left", padx=5)

# New button to open graph window
tk.Button(button_frame, text="Show Graph", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=show_stock_graph).pack(side="left", padx=5)

# New buttons for CSV download and reset
tk.Button(button_frame, text="Download CSV", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=download_csv).pack(side="left", padx=5)

tk.Button(button_frame, text="Reset Data", font=("Comic Sans MS", 10, "bold"),
          bg="#99ccff", fg="#003366", activebackground="#66b3ff",
          command=reset_data).pack(side="left", padx=5)

# Scrollable Frame
scroll_frame_container = tk.Frame(root, bg="#e6f2ff")
scroll_frame_container.pack(fill="both", expand=True, padx=10, pady=10)

canvas = tk.Canvas(scroll_frame_container, bg="#f0f8ff", bd=1, relief="solid", height=260)
scrollbar = tk.Scrollbar(scroll_frame_container, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas, bg="#f0f8ff", padx=10, pady=10)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

# Result Label
result_label = tk.Label(root, text="", font=("Helvetica", 12), bg="#e6f2ff")
result_label.pack(pady=5)

# ------------------- Start Auto-refresh -------------------
auto_refresh()

# ------------------- Keyboard Shortcuts -------------------

def bind_shortcuts():
    root.bind("<Control-o>", lambda e: get_stock_history("full"))
    root.bind("<Control-a>", lambda e: get_stock_history("avg"))
    root.bind("<Control-g>", lambda e: show_stock_graph())
    root.bind("<Control-d>", lambda e: download_csv())
    root.bind("<Control-r>", lambda e: reset_data())
    root.bind("<Control-q>", lambda e: root.quit())

bind_shortcuts()

# ------------------- Run the GUI -------------------
root.mainloop()
